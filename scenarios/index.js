'use strict';
var utils = require('../utils');
var config = require('../config');
var superagent = require("superagent");
//var agenda = require('../agenda');
const nodemailer = require('nodemailer');

const Saving = require('./saving');
const saving = new Saving();

const PayBill = require('./payBill');
const pay = new PayBill();

const XFer = require('./xfer');
const xfer = new XFer();

const Account = require('./account');
const account = new Account();

const Register = require('./register');
const register = new Register();

const News = require('./news');
const news = new News();

const Card = require('./card');
const card = new Card();

const Location = require('./location');
const loca = new Location();

const Model = require('../model');
const model = new Model();

const Services = require('../services');
const services = new Services();

var make_text_message = (texts) => {
  var txt = texts.map((text) => {
    return {
      text: text
    }
  })
  return {
    messages: txt
  }
};

class Scenario {
  constructor(f) {
    console.log('Scenario starting...');
    //model.findAll('1');
  }

  processPostback(sender, postback, f) {
    return new Promise((resolve, reject) => {
      let buttons = '';
      let text = '';
      let data = '';

      //
      if (postback && postback.payload) {
        console.log('postback.payload :' + postback.payload);

        switch (postback.payload) {
          case 'GET_STARTED_PAYLOAD':
            f.getProfile(sender)
              .then(profile => {
                const {
                  name,
                  id
                } = profile;
                f.txt(sender, 'Xin ch√†o ' + name + ' ‚ù§Ô∏è \nCh√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! \nH√£y l·ª±a ch·ªçn c√°c t√≠nh nƒÉng tr√™n Menu ho·∫∑c g√µ Xem so du, Chuyen khoan, Gui tiet kiem. ');
              })
              .catch(error => {
                console.log('getProfile err: ' + error);
                f.txt(sender, 'Xin ch√†o b·∫°n ‚ù§Ô∏è \nCh√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! \nH√£y l·ª±a ch·ªçn c√°c t√≠nh nƒÉng tr√™n Menu ho·∫∑c g√µ Xem so du, Chuyen khoan, Gui tiet kiem. ');
              });

            register.showRegisterFinbot(sender, f);
            break;
          case 'menu:INQ_BALANCE_PAYLOAD':
            account.acctInfo(sender, f);
            break;
          case 'menu:XFER_PAYLOAD':
            f.txt(sender, 'B·∫°n h√£y g√µ L·ªánh chuy·ªÉn ti·ªÅn theo c√∫ ph√°p: Chuyen <So tien> toi <So tai khoan> tai <Ma ngan hang> \n VD: chuyen 1000000 toi 462879758937 tai VCB');
            break;
          case 'menu:REG_PAYLOAD':
            register.showRegister(sender, f);
            break;
          case 'menu:PAY_ELECTRIC':
            pay.showPayType(sender, f);
            break;
          case 'menu:PAY_WARTER':
            f.txt(sender, 'ƒêang l·∫•y v·ªÅ th√¥ng tin t·ª∑ gi√° l√£i su·∫•t m·ªõi nh·∫•t');
            //services.depInterest(sender, f);
            news.exchangeRate(sender, f);
            news.interestRate(sender, f);
            break;
          case 'menu:NEWS_PAYLOAD':
            news.news(sender, f);
            break;
          case 'menu:MNSTMT_PAYLOAD':
            account.miniStatement(sender, f);
            break;
          case 'menu:SAVING_PAYLOAD':
            saving.showPeriod(sender, f);
            break;
          case 'menu:LOCATION_PAYLOAD':
            loca.showLocation(sender, f);
            break;
          case 'menu:XRATE_PAYLOAD':
            news.exchangeRate(sender, f);
            break;
          case 'menu:IRATE_PAYLOAD':
            news.interestRate(sender, f);
            break;
          case 'NEWS_BOT':
            news.showRegisterNews(sender, f);
            break;
          case 'REG_EFAST':
            f.txt(sender, 'Chuy·ªÉn t·ªõi trang ƒëƒÉng k√Ω d·ªãch v·ª• cho KHDN');
            break;
          case 'QA_CARD_EPARTNER_ISSUE':
            f.txt(sender, 'Anh/ch·ªã vui l√≤ng mang theo CMTND ƒë·∫øn b·∫•t k·ª≥ CN/PGD c·ªßa Vietinbank ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ph√°t h√†nh th·∫ª ATM Epartner. Anh/ch·ªã s·∫Ω nh·∫≠n ƒë∆∞·ª£c th·∫ª sau 05-07 ng√†y l√†m vi·ªác ·∫°.');
            card.showQAEpartner(sender, f);
            break;
          case 'QA_CARD_EPARTNER_ISSUE_FEE':
            f.txt(sender, 'Vietinbank c√≥ nhi·ªÅu lo·∫°i th·∫ª ATM ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa anh/ch·ªã v·ªõi nh·ªØng h·∫°n m·ª©c kh√°c nhau. Ch·ªâ v·ªõi 50 000 VND; anh/ch·ªã ƒë√£ c√≥ th·ªÉ ph√°t h√†nh th·∫ª m·ªôt chi·∫øc th·∫ª ATM v·ªõi th·ªùi h·∫°n s·ª≠ d·ª•ng 20 nƒÉm v·ªõi r·∫•t nhi·ªÅu ti·ªán √≠ch');
            card.showQAEpartner(sender, f);
            break;
          case 'QA_CARD_EPARTNER_UTILITY':
            f.txt(sender, 'Sau khi s·ªü h·ªØu th·∫ª ATM Epartner, anh/ch·ªã c√≥ th·ªÉ s·ª≠ d·ª•ng r·∫•t nhi·ªÅu c√°c ti·ªán √≠ch ƒëa d·∫°ng nh∆∞ thanh to√°n tr·ª±c tuy·∫øn; n·∫°p ti·ªÅn ƒëi·ªán tho·∫°i vntopup; tr√≠ch n·ª£ t·ª± ƒë·ªông thanh to√°n h√≥a ƒë∆°n, r√∫t ti·ªÅn kh√¥ng d√πng th·∫ª ·∫°');
            card.showQAEpartner(sender, f);
            break;
          case 'QA_CARD_CREDIT_ISSUE':
            f.txt(sender, 'ƒê·ªÉ ph√°t h√†nh th·∫ª TDQT t·∫°i Vietinbank c·∫ßn ƒë√°p ·ª©ng ƒë∆∞·ª£c m·ªôt s·ªë ƒëi·ªÅu ki·ªán nh·∫•t ƒë·ªãnh c·ªßa ng√¢n h√†ng. Anh/ch·ªã vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi CN Vietinbank g·∫ßn nh·∫•t ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ? Tr∆∞·ªõc khi ƒë·∫øn CN anh/ch·ªã c√≥ th·ªÉ li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 19 00 55 8868 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chu·∫©n b·ªã tr∆∞·ªõc v·ªÅ h·ªì s∆° v√† h√¨nh th·ª©c ph√°t h√†nh.');
            card.showQACreditCard(sender, f);
            break;
          case 'QA_CARD_CREDIT_ISSUE_FEE':
            f.txt(sender, 'Ph√≠ ph√°t h√†nh th·∫ª TDQT c·ªßa Vietinbank t√πy thu·ªôc v√†o h·∫°ng th·∫ª c·ªßa anh/ch·ªã khi ƒë∆∞·ª£c CN Vietinbank th·∫©m ƒë·ªãnh v√† quy·∫øt ƒë·ªãnh. V·ªõi m·ª©c ph√≠ th·∫•p nh·∫•t ch·ªâ l√† 50 000 VND v·ªõi th·∫ª c·ª©ng v√† 75 000 VND v·ªõi th·∫ª chip. Qu√Ω kh√°ch vui l√≤ng li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 1900 55 8868 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ c·ª• th·ªÉ v·ªÅ ph√≠ t·ª´ng lo·∫°i th·∫ª');
            card.showQACreditCard(sender, f);
            break;
          case 'QA_CARD_CREDIT_UTILITY':
            f.txt(sender, 'Sau khi ph√°t h√†nh th·∫ª TDQT c·ªßa Vietinbank anh/ch·ªã c√≥ c∆° h·ªôi tr·∫£i nghi·ªám r·∫•t nhi·ªÅu ti·ªán √≠ch ƒëa d·∫°ng v√† h·ªØu √≠ch nh∆∞ SMS TBBDGD; tr·∫£ g√≥p; thanh to√°n tr·ª±c tuy·∫øn; ch√≠nh s√°ch b·∫£o hi·ªÉm th·∫ª. ƒê·ªÉ c√≥ th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng ti·ªán √≠ch, anh/ch·ªã vui l√≤ng li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 1900 55 8868 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ th√¥ng tin c·ª• th·ªÉ');
            card.showQACreditCard(sender, f);
            break;
          default:
            f.txt(sender, 'Ch√∫ng t√¥i c√≥ th·ªÉ tr·ª£ gi√∫p ƒë∆∞·ª£c g√¨ cho b·∫°n? Vui l√≤ng tham kh·∫£o menu b√™n d∆∞·ªõi ho·∫∑c g√µ n·ªôi dung b·∫°n c·∫ßn h·ªó tr·ª£');
            news.menu(sender, f);
            break;
        }
      }

    });
  }

  processMessage(sender, message, f, wit) {
    return new Promise((resolve, reject) => {
      let buttons = '';
      let text = '';
      let data = '';

      if (message && message.text && !message.quick_reply) {
        // Process the message here
        let messageTxt = message.text;

        console.log('messageTxt:' + messageTxt);
        var senderName = '';
        f.getProfile(sender)
          .then(profile => {
            const {
              name,
              id
            } = profile;
            console.log('getProfile: ' + name);
            senderName = name;
            //news.menu(sender, f);
          })
          .catch(error => {
            console.log('getProfile err: ' + error);
            senderName = ' anh/ch·ªã';
          });

        superagent
          .post(config.QnA_URI)
          .send({
            question: messageTxt
          })
          .set('Ocp-Apim-Subscription-Key', config.QnA_KEY)
          .set('Content-Type', 'application/json; charset=UTF-8')
          .end(function(err, res) {
            if (err || !res.ok) {
              f.txt(sender, "Oh no! error = " + err + ", " + JSON.stringify(res));
            } else {
              //console.log("res.header =", res.header);
              //console.log("res.body =", res.body);
              //console.log("res.body =", JSON.stringify(res.answers[0].questions));

              //console.log("res.body answer =", res.body.answers[0].answer);
              let score = res.body.answers[0].score;
              if (score > 75) {
                f.txt(sender, utils.htmlDecode(res.body.answers[0].answer));
                //f.txt(sender, 'Score: ' + res.body.answers[0].score);
              } else if (score <= 75 && score > 65) {
                //f.txt(sender, 'Score: ' + res.body.answers[0].score);
                f.txt(sender, utils.htmlDecode(res.body.answers[0].answer));
                f.txt(sender, 'Em kh√¥ng ch·∫Øc c√¢u tr·∫£ l·ªùi c√≥ ƒë√∫ng √Ω h·ªèi kh√¥ng üòä ');
              } else {
                // Generate test SMTP service account from ethereal.email
                // Only needed if you don't have a real mail account for testing

                nodemailer.createTestAccount((err, account) => {

                  // create reusable transporter object using the default SMTP transport
                  let transporter = nodemailer.createTransport({
                    host: config.SMTP_SERVER,
                    port: 465,
                    secure: true, // true for 465, false for other ports
                    requireTLS: true,
                    auth: {
                      user: config.SMTP_USER, // generated ethereal user
                      pass: config.SMTP_PASS // generated ethereal password
                    }
                  });

                  let mailSubject = 'VietinBank ChatBot: ' + messageTxt;

                  let plaintTextContent = senderName + ' says: ' + messageTxt + '\n';
                  plaintTextContent = plaintTextContent + 'Bot reply: ' + utils.htmlDecode(res.body.answers[0].answer) + ' \n';
                  plaintTextContent = plaintTextContent + 'Score: ' + res.body.answers[0].score + ' \n';
                  plaintTextContent = plaintTextContent + 'Please retrain the bot to make higher score \n';

                  let htmlContent = '<b>' + senderName + ' says: </b> ' + messageTxt + ' <br/>';
                  htmlContent = htmlContent + '<b>Bot reply:</b>  ' + utils.htmlDecode(res.body.answers[0].answer) + ' <br/>';
                  htmlContent = htmlContent + '<b>Score:</b> ' + res.body.answers[0].score + ' <br/>';
                  htmlContent = htmlContent + '<b>Please retrain the bot to make higher score <br/>';

                  // setup email data with unicode symbols
                  let mailOptions = {
                    from: '"VietinBank FaQ ChatBot" <vietinbankchatbot@gmail.com>', // sender address
                    to: config.QnA_ADMIN_MAIL, // list of receivers
                    subject: mailSubject, // Subject line
                    text: plaintTextContent, // plain text body
                    html: htmlContent // html body
                  };

                  console.log('Start sent from: %s', mailOptions.from);
                  // send mail with defined transport object
                  transporter.sendMail(mailOptions, (error, info) => {

                    if (error) {
                      return console.log(error);
                    }
                    console.log('Message sent: %s', info.messageId);
                    // Preview only available when sending through an Ethereal account
                    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));

                    // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@blurdybloop.com>
                    // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...
                  });
                });

                //f.txt(sender, 'Xin l·ªói, em s·∫Ω ghi nh·∫≠n c√¢u h·ªèi v√† xin tr·∫£ l·ªùi sau ·∫° üòä ');
                console.log('Answer: ', utils.htmlDecode(res.body.answers[0].answer));
                console.log('Score: ' + res.body.answers[0].score);
                console.log('Switch to wit.ai processing...');

                wit.message(messageTxt)
                  .then(({
                    entities
                  }) => {
                    console.log('WIT resp:' + JSON.stringify(entities));
                    let intent = utils.firstEntity(entities, 'intent');
                    if (!intent) {
                      if (score > 10) {
                        f.txt(sender, utils.htmlDecode(res.body.answers[0].answer));
                        return;
                      } else {
                        // use app data, or a previous context to decide how to 
                        console.log('Not found intent');
                        f.txt(sender, 'Xin l·ªói em ch∆∞a hi·ªÉu y√™u c·∫ßu. Em s·∫Ω ghi nh·∫≠n v√† tr·∫£ l·ªùi sau ·∫°. Vui l√≤ng tham kh·∫£o menu b√™n d∆∞·ªõi ho·∫∑c g√µ n·ªôi dung c·∫ßn h·ªó tr·ª£ r√µ r√†ng h∆°n');
                        news.menu(sender, f);
                        return;
                      }
                    }

                    switch (intent.value) {
                      case 'truyvantaikhoan':
                        account.acctInfo(sender, f);
                        break;
                      case 'chuyenkhoan':
                        let bankCode = entities.bankCode ? entities.bankCode[0].value : 'VietinBank';
                        let sotien = entities.number ? entities.number[0].value : 'undefined';
                        let taikhoanthuhuong = entities.number ? entities.number[1].value : 'undefined';
                        //console.log(' >>>>>> bankCode: ' + bankCode);
                        //console.log(' >>>>>> sotien: ' + sotien);
                        //console.log(' >>>>>> taikhoanthuhuong: ' + taikhoanthuhuong);

                        if (sotien == 'undefined' || taikhoanthuhuong == 'undefined') {
                          xfer.showHelp(sender, f);
                        } else {
                          let confirmMsg = 'B·∫°n mu·ªën chuy·ªÉn ' + sotien + '  t·ªõi ' + taikhoanthuhuong + ' t·∫°i ' + bankCode + '. Nh·∫•n X√°c th·ª±c ƒë·ªÉ chuy·ªÉn b·∫°n ƒë·∫øn trang x√°c th·ª±c OTP';
                          let confirmUrl = 'http://hungpt.handcraft.com/xfer.html?fbid=' + sender + '&amt=' + sotien + '&benAc=' + taikhoanthuhuong + '&benBank=' + bankCode;
                          xfer.showConfirm(sender, f, confirmMsg, confirmUrl);

                        }

                        break;
                      case 'thanhtoanhoadon':
                        pay.showHelp(sender, f);
                        break;
                      case 'timdiadiem':
                        loca.showLocation(sender, f);
                        break;
                      case 'tintucsukien':
                        let newsType = entities.newsType ? entities.newsType[0].value : 'undefined';

                        switch (true) {
                          case (newsType.value === 'san pham dich vu' || newsType.value === 'san pham' || newsType.value === 'dich vu'):
                            news.newsSP(sender, f);
                            break;
                          case (newsType.value === 'khuyen mai'):
                            news.newsKM(sender, f);
                            break;
                          default:
                            news.news(sender, f);
                            break;
                        }
                        break;
                      case 'guitietkiem':
                        let kyhan = entities.number ? entities.number[0].value : 'undefined';
                        let sotientietkiem = entities.number ? entities.number[1].value : 'undefined';
                        if (kyhan == 'undefined' || sotientietkiem == 'undefined') {
                          saving.showPeriod(sender, f);
                        } else {
                          let confirmMsg = 'B·∫°n mu·ªën g·ª≠i ' + sotientietkiem + '  k·ª≥ h·∫°n ' + kyhan + ' th√°ng. Nh·∫•n X√°c th·ª±c ƒë·ªÉ chuy·ªÉn b·∫°n ƒë·∫øn trang x√°c th·ª±c OTP';
                          let confirmUrl = 'http://hungpt.handcraft.com/saving.html?fbid=' + sender + '&amt=' + sotientietkiem + '&period=' + kyhan;
                          saving.showConfirm(sender, f, confirmMsg, confirmUrl);
                        }
                        break;
                      case 'dangkydichvu':
                        register.showRegister(sender, f);
                        break;
                      case 'tracuu':
                        f.txt(sender, 'B·∫°n mu·ªën tra c·ª©u th√¥ng tin');
                        break;
                      case 'vay':
                        f.txt(sender, 'B·∫°n mu·ªën t√¨m hi·ªÉu th√¥ng tin ƒë·ªÉ vay v·ªën ng√¢n h√†ng');
                        break;
                      case 'tranovay':
                        f.txt(sender, 'B·∫°n mu·ªën tr·∫£ n·ª£ kho·∫£n vay');
                        break;
                      case 'goodbye':
                        f.txt(sender, 'C·∫£m ∆°n anh ch·ªã, ch√∫c anh ch·ªã m·ªôt ng√†y t·ªët l√†nh :) ');
                        break;
                      case 'xinchao':
                        let who = utils.firstEntity(entities, 'who');
                        let greetings = utils.firstEntity(entities, 'greetings');
                        let bye = utils.firstEntity(entities, 'bye');

                        if (greetings) {
                          f.txt(sender, 'Xin ch√†o ' + senderName + '! Em c√≥ th·ªÉ gi√∫p g√¨ ƒë∆∞·ª£c ·∫°?');
                        } else if (bye) {
                          f.txt(sender, bye.value + ' ' + senderName + ' :) ');
                        } else if (who) {
                          f.txt(sender, 'Em l√† Chi, r·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª• ' + ' ' + senderName + ' ‚ù§Ô∏è ');
                        } else {
                          f.txt(sender, ' ^_^ ');
                        }
                        break;
                      case 'camthan':
                        let emoTerm = entities.emoTerm ? entities.emoTerm[0].metadata : 'undefined';

                        if (emoTerm == 'undefined') {
                          f.txt(sender, 'C·∫£m ∆°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa VietinBank ^_^ ');
                        } else {
                          switch (emoTerm) {
                            case 'xinh':
                              f.txt(sender, 'Th·∫≠t v·∫≠y ·∫°, hihi. C·∫£m ∆°n ·∫° üòù');
                              break;
                            case 'thongminh':
                              f.txt(sender, 'D·∫° qu√° khen r√πi ·∫° üòä ');
                              break;
                            case 'gioioi':
                              f.txt(sender, 'Xin l·ªói v√¨ ƒë√£ l√†m anh ch·ªã kh√¥ng vui üòá ');
                              break;
                            case 'toite':
                              f.txt(sender, 'üòî');
                              break;
                            default:
                              f.txt(sender, ' ^_^ ');
                              break;
                          }
                        }

                        break;
                      case 'camon':
                        model.question.add('2');
                        f.txt(sender, 'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa VietinBank ^_^ ');
                        break;
                      case 'the':
                        //let issueTerm = entities.issueTerm ? entities.issueTerm[0].value : 'undefined';
                        let issueFee = entities.issueFee ? entities.issueFee[0].value : 'undefined';
                        let issueType = entities.issueType ? entities.issueType[0].metadata : 'undefined';

                        //if (issueTerm == 'undefined') {
                        if (issueType == 'undefined') {
                          f.txt(sender, 'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa VietinBank ^_^ ');
                        } else {
                          if (issueFee != 'undefined') {
                            switch (issueType) {
                              case 'epartner':
                                f.txt(sender, 'Vietinbank c√≥ nhi·ªÅu lo·∫°i th·∫ª ATM ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa anh/ch·ªã v·ªõi nh·ªØng h·∫°n m·ª©c kh√°c nhau. Ch·ªâ v·ªõi 50 000 VND; anh/ch·ªã ƒë√£ c√≥ th·ªÉ ph√°t h√†nh th·∫ª m·ªôt chi·∫øc th·∫ª ATM v·ªõi th·ªùi h·∫°n s·ª≠ d·ª•ng 20 nƒÉm v·ªõi r·∫•t nhi·ªÅu ti·ªán √≠ch');
                                card.showQAEpartner(sender, f);
                                break;
                              case 'jcb':
                                f.txt(sender, 'Ph√≠ ph√°t h√†nh th·∫ª TDQT c·ªßa Vietinbank t√πy thu·ªôc v√†o h·∫°ng th·∫ª c·ªßa anh/ch·ªã khi ƒë∆∞·ª£c CN Vietinbank th·∫©m ƒë·ªãnh v√† quy·∫øt ƒë·ªãnh. V·ªõi m·ª©c ph√≠ th·∫•p nh·∫•t ch·ªâ l√† 50 000 VND v·ªõi th·∫ª c·ª©ng v√† 75 000 VND v·ªõi th·∫ª chip. Qu√Ω kh√°ch vui l√≤ng li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 1900 55 8868 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ c·ª• th·ªÉ v·ªÅ ph√≠ t·ª´ng lo·∫°i th·∫ª');
                                card.showQACreditCard(sender, f);
                                break;
                              case 'visa':
                                f.txt(sender, 'Ph√≠ ph√°t h√†nh th·∫ª TDQT c·ªßa Vietinbank t√πy thu·ªôc v√†o h·∫°ng th·∫ª c·ªßa anh/ch·ªã khi ƒë∆∞·ª£c CN Vietinbank th·∫©m ƒë·ªãnh v√† quy·∫øt ƒë·ªãnh. V·ªõi m·ª©c ph√≠ th·∫•p nh·∫•t ch·ªâ l√† 50 000 VND v·ªõi th·∫ª c·ª©ng v√† 75 000 VND v·ªõi th·∫ª chip. Qu√Ω kh√°ch vui l√≤ng li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 1900 55 8868 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ c·ª• th·ªÉ v·ªÅ ph√≠ t·ª´ng lo·∫°i th·∫ª');
                                card.showQACreditCard(sender, f);
                                break;
                              case 'master':
                                f.txt(sender, 'Ph√≠ ph√°t h√†nh th·∫ª TDQT c·ªßa Vietinbank t√πy thu·ªôc v√†o h·∫°ng th·∫ª c·ªßa anh/ch·ªã khi ƒë∆∞·ª£c CN Vietinbank th·∫©m ƒë·ªãnh v√† quy·∫øt ƒë·ªãnh. V·ªõi m·ª©c ph√≠ th·∫•p nh·∫•t ch·ªâ l√† 50 000 VND v·ªõi th·∫ª c·ª©ng v√† 75 000 VND v·ªõi th·∫ª chip. Qu√Ω kh√°ch vui l√≤ng li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 1900 55 8868 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ c·ª• th·ªÉ v·ªÅ ph√≠ t·ª´ng lo·∫°i th·∫ª');
                                card.showQACreditCard(sender, f);
                                break;
                              case 'tdqt':
                                f.txt(sender, 'Ph√≠ ph√°t h√†nh th·∫ª TDQT c·ªßa Vietinbank t√πy thu·ªôc v√†o h·∫°ng th·∫ª c·ªßa anh/ch·ªã khi ƒë∆∞·ª£c CN Vietinbank th·∫©m ƒë·ªãnh v√† quy·∫øt ƒë·ªãnh. V·ªõi m·ª©c ph√≠ th·∫•p nh·∫•t ch·ªâ l√† 50 000 VND v·ªõi th·∫ª c·ª©ng v√† 75 000 VND v·ªõi th·∫ª chip. Qu√Ω kh√°ch vui l√≤ng li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 1900 55 8868 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ c·ª• th·ªÉ v·ªÅ ph√≠ t·ª´ng lo·∫°i th·∫ª');
                                card.showQACreditCard(sender, f);
                                break;
                              default:
                                f.txt(sender, ' ^_^ ');
                                break;
                            }
                          } else {
                            switch (issueType) {
                              case 'epartner':
                                f.txt(sender, 'Anh/ch·ªã vui l√≤ng mang theo CMTND ƒë·∫øn b·∫•t k·ª≥ CN/PGD c·ªßa Vietinbank ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ph√°t h√†nh th·∫ª ATM Epartner. Anh/ch·ªã s·∫Ω nh·∫≠n ƒë∆∞·ª£c th·∫ª sau 05-07 ng√†y l√†m vi·ªác ·∫°.');
                                card.showQAEpartner(sender, f);
                                break;
                              case 'jcb':
                                f.txt(sender, 'ƒê·ªÉ ph√°t h√†nh th·∫ª TDQT JCB t·∫°i Vietinbank c·∫ßn ƒë√°p ·ª©ng ƒë∆∞·ª£c m·ªôt s·ªë ƒëi·ªÅu ki·ªán nh·∫•t ƒë·ªãnh c·ªßa ng√¢n h√†ng. Anh/ch·ªã vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi CN Vietinbank g·∫ßn nh·∫•t ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ? Tr∆∞·ªõc khi ƒë·∫øn CN anh/ch·ªã c√≥ th·ªÉ li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 19 00 55 8868 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chu·∫©n b·ªã tr∆∞·ªõc v·ªÅ h·ªì s∆° v√† h√¨nh th·ª©c ph√°t h√†nh.');
                                card.showQACreditCard(sender, f);
                                break;
                              case 'visa':
                                f.txt(sender, 'ƒê·ªÉ ph√°t h√†nh th·∫ª TDQT Visa t·∫°i Vietinbank c·∫ßn ƒë√°p ·ª©ng ƒë∆∞·ª£c m·ªôt s·ªë ƒëi·ªÅu ki·ªán nh·∫•t ƒë·ªãnh c·ªßa ng√¢n h√†ng. Anh/ch·ªã vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi CN Vietinbank g·∫ßn nh·∫•t ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ? Tr∆∞·ªõc khi ƒë·∫øn CN anh/ch·ªã c√≥ th·ªÉ li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 19 00 55 8868 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chu·∫©n b·ªã tr∆∞·ªõc v·ªÅ h·ªì s∆° v√† h√¨nh th·ª©c ph√°t h√†nh.');
                                card.showQACreditCard(sender, f);
                                break;
                              case 'master':
                                f.txt(sender, 'ƒê·ªÉ ph√°t h√†nh th·∫ª TDQT Master Card t·∫°i Vietinbank c·∫ßn ƒë√°p ·ª©ng ƒë∆∞·ª£c m·ªôt s·ªë ƒëi·ªÅu ki·ªán nh·∫•t ƒë·ªãnh c·ªßa ng√¢n h√†ng. Anh/ch·ªã vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi CN Vietinbank g·∫ßn nh·∫•t ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ? Tr∆∞·ªõc khi ƒë·∫øn CN anh/ch·ªã c√≥ th·ªÉ li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 19 00 55 8868 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chu·∫©n b·ªã tr∆∞·ªõc v·ªÅ h·ªì s∆° v√† h√¨nh th·ª©c ph√°t h√†nh.');
                                card.showQACreditCard(sender, f);
                                break;
                              case 'tdqt':
                                f.txt(sender, 'ƒê·ªÉ ph√°t h√†nh th·∫ª TDQT t·∫°i Vietinbank c·∫ßn ƒë√°p ·ª©ng ƒë∆∞·ª£c m·ªôt s·ªë ƒëi·ªÅu ki·ªán nh·∫•t ƒë·ªãnh c·ªßa ng√¢n h√†ng. Anh/ch·ªã vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi CN Vietinbank g·∫ßn nh·∫•t ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ? Tr∆∞·ªõc khi ƒë·∫øn CN anh/ch·ªã c√≥ th·ªÉ li√™n h·ªá Contact Center Vietinbank theo s·ªë ƒëi·ªán tho·∫°i 19 00 55 8868 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chu·∫©n b·ªã tr∆∞·ªõc v·ªÅ h·ªì s∆° v√† h√¨nh th·ª©c ph√°t h√†nh.');
                                card.showQACreditCard(sender, f);
                                break;
                              default:
                                f.txt(sender, ' ^_^ ');
                                break;
                            }
                          }

                        }

                        //}
                        break;
                      default:
                        console.log(`?  ${intent.value}`);
                        f.txt(sender, 'Okey! intent matching: ' + intent.value);
                        f.txt(sender, 'Data collected: ' + JSON.stringify(entities));
                        break;
                    }
                  })
                  .catch(error => {
                    console.log(error);
                    f.txt(sender, "H·ªá th·ªëng ph·∫£n h·ªìi ch·∫≠m, xin b·∫°n ch·ªù trong gi√¢y l√°t.");
                  });
              }
              //f.txt(sender, 'Score: ' + res.body.score.value);
            }
          });

      }
    });
  }

  processQuickreply(sender, message, f, agenda) {
    //console.log('processQuickreply WIT resp :');
    let buttons = '';
    let text = '';
    let data = '';
    if (message && message.quick_reply) {
      let quickReply = message.quick_reply;
      //console.log('quickReply: ' + JSON.stringify(message.quick_reply));

      switch (quickReply.payload) {
        case 'PAY_MOBILE':
          f.txt(sender, 'Hi·ªán ƒëang c√≥ ch∆∞∆°ng tr√¨nh KM n·∫°p th·∫ª Viettel gi·∫£m 3%.\nB·∫°n h√£y g√µ L·ªánh Topup Mobileg theo c√∫ ph√°p: TOPUP <So tien> <So dien thoai> \n VD: topup 1000000 09878788788');
          break;
        case 'PAY_WT':
          f.txt(sender, 'B·∫°n c√≥ th·ªÉ thanh to√°n n∆∞·ªõc cho c√°c nh√† cung c·∫•p N∆∞·ªõc A, N∆∞·ªõc B.\nB·∫°n h√£y g√µ L·ªánh Thanh to√°n N∆∞·ªõc theo c√∫ ph√°p: PW <So tien> <So HD> <Ma NCC> \n VD: PW 1500000 HD3784384 NCC1');
          break;
        case 'PAY_AT':
          f.txt(sender, 'B·∫°n c√≥ th·ªÉ thanh to√°n v√© m√°y bay cho VietJET, VietnamAirline, Jestar.\nB·∫°n h√£y g√µ L·ªánh Thanh to√°n V√© m√°y bay theo c√∫ ph√°p: PA <So tien> <So V√©> <Ma NCC> \n VD: PA 1500000 HD3784384 NCC1');
          break;
        case 'PAY_ELEC':
          f.txt(sender, 'B·∫°n c√≥ th·ªÉ thanh to√°n ti·ªÅn ƒëi·ªán cho c√°c nh√† cung c·∫•p A, B.\nB·∫°n h√£y g√µ L·ªánh Thanh to√°n ƒêi·ªán theo c√∫ ph√°p: PE <So tien> <So HD> <Ma NCC> \n VD: PE 1500000 HD3784384 NCC1');
          break;
        case 'SAVE_3M':
          f.txt(sender, 'L√£i su·∫•t g·ª≠i ti·∫øt ki·ªám 3 th√°ng t·∫°i VietinBank hi·ªán ƒëang l√† 4,3%.\nB·∫°n h√£y g√µ L·ªánh G·ª≠i ti·∫øt ki·ªám 3 th√°ng theo c√∫ ph√°p: GTK3 <So tien> \n VD: gtk3 1000000');
          break;
        case 'SAVE_6M':
          f.txt(sender, 'L√£i su·∫•t g·ª≠i ti·∫øt ki·ªám 6 th√°ng t·∫°i VietinBank hi·ªán ƒëang l√† 5,3%.\nB·∫°n h√£y g√µ L·ªánh G·ª≠i ti·∫øt ki·ªám 6 th√°ng theo c√∫ ph√°p: GTK6 <So tien> \n VD: gtk6 1500000');
          break;
        case 'SAVE_12M':
          f.txt(sender, 'L√£i su·∫•t g·ª≠i ti·∫øt ki·ªám 12 th√°ng t·∫°i VietinBank hi·ªán ƒëang l√† 6,8%.\nB·∫°n h√£y g√µ L·ªánh G·ª≠i ti·∫øt ki·ªám 12 th√°ng theo c√∫ ph√°p: GTK12 <So tien> \n VD: gtk12 1000000');
          break;
        case 'NEWS_21h30':
          f.txt(sender, 'B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n tin th√†nh c√¥ng. Tin t·ª©c m·ªõi nh·∫•t s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b·∫°n l√∫c 21h30 h√†ng ng√†y.');
          break;
        case 'NEWS_12h':
          f.txt(sender, 'B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n tin th√†nh c√¥ng. Tin t·ª©c m·ªõi nh·∫•t s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b·∫°n l√∫c 12h h√†ng ng√†y.');
          break;
        case 'NEWS_7h30':
          let task = 'NEWS_7h30';
          try {
            //agenda.createReminder(agenda, f);
          } catch (error) {
            console.log(error);
          }

          f.txt(sender, 'B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n tin th√†nh c√¥ng. Tin t·ª©c m·ªõi nh·∫•t s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b·∫°n l√∫c 7h30 h√†ng ng√†y.');
          break;
        default:
          f.txt(sender, 'Data collected: ' + JSON.stringify(quickReply));
          break;
      }
    }
  }

  processAttachment(sender, message, f) {
    //console.log('processAttachment ');
    let buttons = '';
    let text = '';
    let data = '';
    let locType = 'ATM';

    if (message && message.attachments) {
      console.log('message.attachments: ' + JSON.stringify(message.attachments));
      let locTitle = message.attachments[0].title;
      let coord = message.attachments[0].payload.coordinates;
      let locLat = coord.lat;
      let locLong = coord.long;

      f.txt(sender, 'B·∫°n ƒëang ·ªü g·∫ßn ƒë·ªãa ƒëi·ªÉm ' + locTitle + '(lat: ' + locLat + ', long: ' + locLong + '), quanh b·∫°n c√≥ c√°c PGD sau c·ªßa VietinBank: \n üè¶ 123 X√£ ƒê√†n \n üè¶ 15 Nam ƒê·ªìng \n üè¶ 19 T√¢y S∆°n');

      //services.location(sender, locLat, locLong, locType, f);
    }
  }
}

module.exports = Scenario;