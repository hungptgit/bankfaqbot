'use strict';
var utils = require('../utils');
var config = require('../config');
var superagent = require("superagent");
//var agenda = require('../agenda');
const nodemailer = require('nodemailer');

const Saving = require('./saving');
const saving = new Saving();

const PayBill = require('./payBill');
const pay = new PayBill();

const XFer = require('./xfer');
const xfer = new XFer();

const Account = require('./account');
const account = new Account();

const Register = require('./register');
const register = new Register();

const News = require('./news');
const news = new News();

const Card = require('./card');
const card = new Card();

const Location = require('./location');
const loca = new Location();

const Model = require('../model');
const model = new Model();

const Services = require('../services');
const services = new Services();

var make_text_message = (texts) => {
  var txt = texts.map((text) => {
    return {
      text: text
    }
  })
  return {
    messages: txt
  }
};

class Scenario {
  constructor(f) {
    console.log('Scenario starting...');
    //model.findAll('1');
  }

  processPostback(sender, postback, f) {
    return new Promise((resolve, reject) => {
      let buttons = '';
      let text = '';
      let data = '';

      //
      if (postback && postback.payload) {
        console.log('postback.payload :' + postback.payload);

        switch (postback.payload) {
          case 'GET_STARTED_PAYLOAD':
            f.getProfile(sender)
              .then(profile => {
                const {
                  name,
                  id
                } = profile;
                f.txt(sender, 'Xin ch√†o ' + name + ' ‚ù§Ô∏è \nCh√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! \nH√£y l·ª±a ch·ªçn c√°c t√≠nh nƒÉng tr√™n Menu ho·∫∑c g√µ Xem so du, Chuyen khoan, Gui tiet kiem. ');
              })
              .catch(error => {
                console.log('getProfile err: ' + error);
                f.txt(sender, 'Xin ch√†o b·∫°n ‚ù§Ô∏è \nCh√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! \nH√£y l·ª±a ch·ªçn c√°c t√≠nh nƒÉng tr√™n Menu ho·∫∑c g√µ Xem so du, Chuyen khoan, Gui tiet kiem. ');
              });

            register.showRegisterFinbot(sender, f);
            break;
          case 'menu:INQ_BALANCE_PAYLOAD':
            account.acctInfo(sender, f);
            break;
          case 'menu:XFER_PAYLOAD':
            f.txt(sender, 'B·∫°n h√£y g√µ L·ªánh chuy·ªÉn ti·ªÅn theo c√∫ ph√°p: Chuyen <So tien> toi <So tai khoan> tai <Ma ngan hang> \n VD: chuyen 1000000 toi 462879758937 tai VCB');
            break;
          case 'menu:REG_PAYLOAD':
            register.showRegister(sender, f);
            break;
          case 'menu:PAY_ELECTRIC':
            pay.showPayType(sender, f);
            break;
          case 'menu:PAY_WARTER':
            f.txt(sender, 'ƒêang l·∫•y v·ªÅ th√¥ng tin t·ª∑ gi√° l√£i su·∫•t m·ªõi nh·∫•t');
            //services.depInterest(sender, f);
            news.exchangeRate(sender, f);
            news.interestRate(sender, f);
            break;
          case 'menu:NEWS_PAYLOAD':
            news.news(sender, f);
            break;
          case 'menu:MNSTMT_PAYLOAD':
            account.miniStatement(sender, f);
            break;
          case 'menu:SAVING_PAYLOAD':
            saving.showPeriod(sender, f);
            break;
          case 'menu:LOCATION_PAYLOAD':
            loca.showLocation(sender, f);
            break;
          case 'menu:XRATE_PAYLOAD':
            news.exchangeRate(sender, f);
            break;
          case 'menu:IRATE_PAYLOAD':
            news.interestRate(sender, f);
            break;
          case 'NEWS_BOT':
            news.showRegisterNews(sender, f);
            break;
          case 'REG_EFAST':
            f.txt(sender, 'Chuy·ªÉn t·ªõi trang ƒëƒÉng k√Ω d·ªãch v·ª• cho KHDN');
            break;
          default:
            f.txt(sender, 'Ch√∫ng t√¥i c√≥ th·ªÉ tr·ª£ gi√∫p ƒë∆∞·ª£c g√¨ cho b·∫°n? Vui l√≤ng tham kh·∫£o menu b√™n d∆∞·ªõi ho·∫∑c g√µ n·ªôi dung b·∫°n c·∫ßn h·ªó tr·ª£');
            news.menu(sender, f);
            break;
        }
      }

    });
  }

  processMessage(sender, message, f, wit) {
    return new Promise((resolve, reject) => {
      let buttons = '';
      let text = '';
      let data = '';

      if (message && message.text && !message.quick_reply) {
        let messageTxt = message.text;

        console.log('messageTxt:' + messageTxt);
        var senderName = '';
        f.getProfile(sender)
          .then(profile => {
            const {
              name,
              id
            } = profile;
            console.log('getProfile: ' + name);
            senderName = name;
          })
          .catch(error => {
            console.log('getProfile err: ' + error);
            senderName = ' anh/ch·ªã';
          });

        superagent
          .post(config.QnA_URI)
          .send({
            question: messageTxt,
            top: 3
          })
          .set('Ocp-Apim-Subscription-Key', config.QnA_KEY)
          .set('Content-Type', 'application/json; charset=UTF-8')
          .end(function(err, res) {
            if (err || !res.ok) {
              f.txt(sender, "Oh no! error = " + err + ", " + JSON.stringify(res));
            } else {
              let score = res.body.answers[0].score;
              if (score > 85) {
                f.txt(sender, utils.htmlDecode(res.body.answers[0].answer));
              } else if (score <= 85 && score > 75) {
                f.txt(sender, utils.htmlDecode(res.body.answers[0].answer));
                f.txt(sender, 'C√¢u tr·∫£ l·ªùi c√≥ ƒë√∫ng √Ω h·ªèi c·ªßa anh/ch·ªã kh√¥ng üòä ');
              } else {
                console.log('Answer: ', utils.htmlDecode(res.body.answers[0].answer));
                console.log('Score: ' + res.body.answers[0].score);
                console.log('Switch to wit.ai processing...');

                // sent mail to remind train bot
                nodemailer.createTestAccount((err, account) => {
                  // create reusable transporter object using the default SMTP transport
                  let transporter = nodemailer.createTransport({
                    host: config.SMTP_SERVER,
                    port: 465,
                    secure: true, // true for 465, false for other ports
                    requireTLS: true,
                    auth: {
                      user: config.SMTP_USER, // generated ethereal user
                      pass: config.SMTP_PASS // generated ethereal password
                    }
                  });

                  let mailSubject = 'VietinBank ChatBot: ' + messageTxt;

                  let plaintTextContent = senderName + ' said: ' + messageTxt + '\n';
                  plaintTextContent = plaintTextContent + 'Bot reply: ' + utils.htmlDecode(res.body.answers[0].answer) + ' \n';
                  plaintTextContent = plaintTextContent + 'Score: ' + res.body.answers[0].score + ' \n';
                  plaintTextContent = plaintTextContent + 'Please retrain the bot to make higher score \n';

                  let htmlContent = '';
                  htmlContent = htmlContent + '<table rules="all" style="border-color: #666;" cellpadding="10">';
                  htmlContent = htmlContent + '<tr style=\'background: #ffa73c;\'><td> </td><td></td></tr>';
                  htmlContent = htmlContent + '<tr><td><strong>' + senderName + ' said:</strong> </td><td>' + messageTxt + '</td></tr>';
                  htmlContent = htmlContent + '<tr><td><strong>Bot reply:</strong> </td><td>' + utils.htmlDecode(res.body.answers[0].answer) + '</td></tr>';
                  htmlContent = htmlContent + '<tr><td><strong>Score:</strong> </td><td>' + res.body.answers[0].score + '</td></tr>';
                  htmlContent = htmlContent + '<tr><td><strong>Note:</strong> </td><td>Please retrain the bot to make higher score </td></tr>';
                  htmlContent = htmlContent + '</table>';

                  // setup email data with unicode symbols
                  let mailOptions = {
                    from: '"VietinBank FaQ ChatBot" <vietinbankchatbot@gmail.com>', // sender address
                    to: config.QnA_ADMIN_MAIL, // list of receivers
                    subject: mailSubject, // Subject line
                    text: plaintTextContent, // plain text body
                    html: htmlContent // html body
                  };

                  console.log('Start sent from: %s', mailOptions.from);
                  // send mail with defined transport object
                  transporter.sendMail(mailOptions, (error, info) => {
                    if (error) {
                      return console.log(error);
                    }
                    console.log('Message sent: %s', info.messageId);
                    // Preview only available when sending through an Ethereal account
                    console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));

                  });
                });

                wit.message(messageTxt)
                  .then(({
                    entities
                  }) => {
                    console.log('WIT resp:' + JSON.stringify(entities));
                    let intent = utils.firstEntity(entities, 'intent');
                    if (typeof intent === "undefined") {
                      // if not have wit intent matching then sent answer event if score < 65 but still > 55
                      if (score > 65) {
                        f.txt(sender, utils.htmlDecode(res.body.answers[0].answer));
                        return;
                      } else if (score <= 65 && score > 10) {
                        //let answer1 = res.body.answers[0].answer;
                        //console.log('QnA q1: ' + JSON.stringify(res.body.answers[0].questions[0]));
                        let question1 = utils.htmlDecode(res.body.answers[0].questions[0]);
                        //let answer2 = res.body.answers[1].answer;
                        //console.log('QnA q2: ' + JSON.stringify(res.body.answers[1].questions[0]));
                        let question2 = utils.htmlDecode(res.body.answers[1].questions[0]);

                        let recommendQuestion = '√ù c·ªßa anh/ch·ªã l√†: \n';
                        recommendQuestion = recommendQuestion + 'C√¢u 1: ' + question1 + ' \n';
                        recommendQuestion = recommendQuestion + 'C√¢u 2: ' + question2 + ' \n';
                        recommendQuestion = recommendQuestion + 'N·∫øu ch∆∞a ƒë√∫ng √Ω b·∫°n, vui l√≤ng ƒë·∫∑t c√¢u h·ªèi kh√°c';

                        //f.quick();
                        try {
                          let buttons = '';
                        
                          buttons = [{
                              content_type: "text",
                              title: "C√¢u 1",
                              image_url: "http://www.freeiconspng.com/uploads/question-icon-23.png",
                              payload: 'QnA_re: ' + question1
                            },
                            {
                              content_type: "text",
                              title: "C√¢u 2",
                              image_url: "http://www.freeiconspng.com/uploads/question-icon-23.png",
                              payload: 'QnA_re: ' + question2
                            }
                          ];
                        
                          f.quick(sender, {
                            recommendQuestion,
                            buttons
                          });
                        } catch (e) {
                          console.log(e);
                        }
                        return;
                      } else {
                        // use app data, or a previous context to decide how to 
                        console.log('Not found intent');
                        f.txt(sender, 'Xin l·ªói em ch∆∞a hi·ªÉu y√™u c·∫ßu. Em s·∫Ω ghi nh·∫≠n v√† tr·∫£ l·ªùi sau ·∫°. Vui l√≤ng tham kh·∫£o menu b√™n d∆∞·ªõi ho·∫∑c g√µ n·ªôi dung c·∫ßn h·ªó tr·ª£ r√µ r√†ng h∆°n');
                        news.menu(sender, f);
                        return;
                      }
                    }

                    switch (intent.value) {
                      case 'goodbye':
                        f.txt(sender, 'C·∫£m ∆°n anh ch·ªã, ch√∫c anh ch·ªã m·ªôt ng√†y t·ªët l√†nh :) ');
                        break;
                      case 'xinchao':
                        let who = utils.firstEntity(entities, 'who');
                        let greetings = utils.firstEntity(entities, 'greetings');
                        let bye = utils.firstEntity(entities, 'bye');

                        if (greetings) {
                          f.txt(sender, 'Xin ch√†o ' + senderName + '! Em c√≥ th·ªÉ gi√∫p g√¨ ƒë∆∞·ª£c ·∫°?');
                        } else if (bye) {
                          f.txt(sender, bye.value + ' ' + senderName + ' :) ');
                        } else if (who) {
                          f.txt(sender, 'Em l√† Chi, r·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª• ' + ' ' + senderName + ' ‚ù§Ô∏è ');
                        } else {
                          f.txt(sender, ' ^_^ ');
                        }
                        break;
                      case 'camthan':
                        let emoTerm = entities.emoTerm ? entities.emoTerm[0].metadata : 'undefined';

                        if (emoTerm == 'undefined') {
                          f.txt(sender, 'Xin l·ªói em ch∆∞a hi·ªÉu y√™u c·∫ßu. Em s·∫Ω ghi nh·∫≠n v√† tr·∫£ l·ªùi sau ·∫°. Vui l√≤ng tham kh·∫£o menu b√™n d∆∞·ªõi ho·∫∑c g√µ n·ªôi dung c·∫ßn h·ªó tr·ª£ r√µ r√†ng h∆°n');
                          news.menu(sender, f);
                        } else {
                          switch (emoTerm) {
                            case 'xinh':
                              f.txt(sender, 'Th·∫≠t v·∫≠y ·∫°, hihi. C·∫£m ∆°n ·∫° üòù');
                              break;
                            case 'thongminh':
                              f.txt(sender, 'D·∫° qu√° khen r√πi ·∫° üòä ');
                              break;
                            case 'gioioi':
                              f.txt(sender, 'Xin l·ªói v√¨ ƒë√£ l√†m anh ch·ªã kh√¥ng vui üòá ');
                              break;
                            case 'toite':
                              f.txt(sender, 'üòî');
                              break;
                            default:
                              f.txt(sender, ' ^_^ ');
                              break;
                          }
                        }

                        break;
                      case 'camon':
                        f.txt(sender, 'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa VietinBank ^_^ ');
                        break;
                      default:
                        f.txt(sender, 'Xin l·ªói em ch∆∞a hi·ªÉu y√™u c·∫ßu. Em s·∫Ω ghi nh·∫≠n v√† tr·∫£ l·ªùi sau ·∫° ^_^');
                        console.log(`?  ${intent.value}`);
                        //f.txt(sender, 'Okey! intent matching: ' + intent.value);
                        //f.txt(sender, 'Data collected: ' + JSON.stringify(entities));
                        break;
                    }
                  })
                  .catch(error => {
                    console.log(error);
                    f.txt(sender, "H·ªá th·ªëng ph·∫£n h·ªìi ch·∫≠m, xin b·∫°n ch·ªù trong gi√¢y l√°t.");
                  });
              }
              //f.txt(sender, 'Score: ' + res.body.score.value);
            }
          });

      }
    });
  }

  processQuickreply(sender, message, f, agenda) {
    //console.log('processQuickreply WIT resp :');
    let buttons = '';
    let text = '';
    let data = '';

    if (message && message.quick_reply) {
      let quickReply = message.quick_reply;
      if (quickReply.payload.includes('QnA_re: ')) {
        let messageTxt = quickReply.payload.replace('QnA_re: ', '');
        superagent
          .post(config.QnA_URI)
          .send({
            question: messageTxt
          })
          .set('Ocp-Apim-Subscription-Key', config.QnA_KEY)
          .set('Content-Type', 'application/json; charset=UTF-8')
          .end(function(err, res) {
            if (err || !res.ok) {
              f.txt(sender, "Oh no! error = " + err + ", " + JSON.stringify(res));
            } else {
              f.txt(sender, utils.htmlDecode(res.body.answers[0].answer));
            }
          });
      } else {
        switch (quickReply.payload) {
          case 'SAVE_3M':
            f.txt(sender, 'L√£i su·∫•t g·ª≠i ti·∫øt ki·ªám 3 th√°ng t·∫°i VietinBank hi·ªán ƒëang l√† 4,3%.\nB·∫°n h√£y g√µ L·ªánh G·ª≠i ti·∫øt ki·ªám 3 th√°ng theo c√∫ ph√°p: GTK3 <So tien> \n VD: gtk3 1000000');
            break;
          case 'SAVE_6M':
            f.txt(sender, 'L√£i su·∫•t g·ª≠i ti·∫øt ki·ªám 6 th√°ng t·∫°i VietinBank hi·ªán ƒëang l√† 5,3%.\nB·∫°n h√£y g√µ L·ªánh G·ª≠i ti·∫øt ki·ªám 6 th√°ng theo c√∫ ph√°p: GTK6 <So tien> \n VD: gtk6 1500000');
            break;
          case 'SAVE_12M':
            f.txt(sender, 'L√£i su·∫•t g·ª≠i ti·∫øt ki·ªám 12 th√°ng t·∫°i VietinBank hi·ªán ƒëang l√† 6,8%.\nB·∫°n h√£y g√µ L·ªánh G·ª≠i ti·∫øt ki·ªám 12 th√°ng theo c√∫ ph√°p: GTK12 <So tien> \n VD: gtk12 1000000');
            break;
          case 'NEWS_7h30':
            let task = 'NEWS_7h30';
            try {
              //agenda.createReminder(agenda, f);
            } catch (error) {
              console.log(error);
            }

            f.txt(sender, 'B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n tin th√†nh c√¥ng. Tin t·ª©c m·ªõi nh·∫•t s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b·∫°n l√∫c 7h30 h√†ng ng√†y.');
            break;
          default:
            f.txt(sender, 'Data collected: ' + JSON.stringify(quickReply));
            break;
        }
      }
    }
  }

  processAttachment(sender, message, f) {
    //console.log('processAttachment ');
    let buttons = '';
    let text = '';
    let data = '';
    let locType = 'ATM';

    if (message && message.attachments) {
      console.log('message.attachments: ' + JSON.stringify(message.attachments));
      let locTitle = message.attachments[0].title;
      let coord = message.attachments[0].payload.coordinates;
      let locLat = coord.lat;
      let locLong = coord.long;
      loca.getAtmLocation(sender, locLat, locLong, f);
      //f.txt(sender, 'B·∫°n ƒëang ·ªü g·∫ßn ƒë·ªãa ƒëi·ªÉm ' + locTitle + '(lat: ' + locLat + ', long: ' + locLong + '), quanh b·∫°n c√≥ c√°c PGD sau c·ªßa VietinBank: \n üè¶ 123 X√£ ƒê√†n \n üè¶ 15 Nam ƒê·ªìng \n üè¶ 19 T√¢y S∆°n');

      //services.location(sender, locLat, locLong, locType, f);
    }
  }
}

module.exports = Scenario;